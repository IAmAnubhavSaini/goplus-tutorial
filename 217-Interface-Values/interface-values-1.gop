// The value of the interface type and the interface value are two different concepts.

// Go+ is a statically typed programming language, types are a compile time concept, so a type is not a value.
// The value of the type descriptor provides information about each type, such as its name and methods.
// In an interface value, the type component is represented by the appropriate type descriptor.

// In Go+, interfaces variables are always initialize well-defined value as other type variables.
// The zero value for an interface has both its type and value components set to nil, for example:

import (
	"bufio"
	"io"
	"os"
)

var w io.Writer

var w2 io.Writer = os.Stdout

w2 = nil // same as w, both w and w2 interface variable has zero value

var w3 = bufio.NewWriter(os.Stdout)

var w4 io.Writer = w3 // w4 has non-zero interface value. Its dynamic type is *bytes.Buffer and its dynamic value is nil. So the result of w4 == nil is false

println(w == nil, w2 == nil, w3 == nil, w4 == nil)

// The interface variable w has zero value. So both its dynamic type and its dynamic value are nil. In this case, the result of if w == nil is true.
// The interface variable w4 has non-zero value. Its dynamic type is *bytes.Buffer and its dynamic value is nil. So the result of w4 == nil is false.

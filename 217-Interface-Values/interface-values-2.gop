// Interface values may be compared using == and !=. Two interface values are equal if both are
// nil, or if their dynamic types are identical and their dynamic values are equal according to the
// usual behavior of == for that type. Because interface values are comparable, they may be used
// as the keys of a map or as the operand of a switch statement.

// However, if two interface values are compared and have the same dynamic type, but that type
// is not comparable (a slice, for instance), then the comparison fails with a panic. For example

var x = []any{1, 2, 3}
var y = []any{1, 2, 3}

println(x == y) // panic: comparing uncomparable type []int

// In this respect, interface types are unusual. Other types are either safely comparable (like
// basic types and pointers) or not comparable at all (like slices, maps, and functions), but when
// comparing interface values or aggregate types that contain interface values, we must be aware
// of the potential for a panic. A similar risk exists when using interfaces as map keys or switch
// operands. Only compare interface values if you are certain that they contain dynamic values
// of comparable types.
